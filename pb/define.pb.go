// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/define.proto

/*
	Package proto is a generated protocol buffer package.

	It is generated from these files:
		proto/define.proto

	It has these top-level messages:
		Header
		ExchangeBeginRequest
		ExchangeRequest
		ExchangeEndRequest
		Digest
		Message
*/
package pb

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type Header struct {
	Flag int32 `protobuf:"varint,1,opt,name=flag,proto3" json:"flag,omitempty"`
}

func (m *Header) Reset()                    { *m = Header{} }
func (m *Header) String() string            { return proto1.CompactTextString(m) }
func (*Header) ProtoMessage()               {}
func (*Header) Descriptor() ([]byte, []int) { return fileDescriptorDefine, []int{0} }

func (m *Header) GetFlag() int32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

type ExchangeBeginRequest struct {
	MyApple []*Digest `protobuf:"bytes,1,rep,name=MyApple" json:"MyApple,omitempty"`
}

func (m *ExchangeBeginRequest) Reset()                    { *m = ExchangeBeginRequest{} }
func (m *ExchangeBeginRequest) String() string            { return proto1.CompactTextString(m) }
func (*ExchangeBeginRequest) ProtoMessage()               {}
func (*ExchangeBeginRequest) Descriptor() ([]byte, []int) { return fileDescriptorDefine, []int{1} }

func (m *ExchangeBeginRequest) GetMyApple() []*Digest {
	if m != nil {
		return m.MyApple
	}
	return nil
}

type ExchangeRequest struct {
	MyPeculiarApple   []*Message `protobuf:"bytes,1,rep,name=MyPeculiarApple" json:"MyPeculiarApple,omitempty"`
	YourPeculiarApple []*Digest  `protobuf:"bytes,2,rep,name=YourPeculiarApple" json:"YourPeculiarApple,omitempty"`
}

func (m *ExchangeRequest) Reset()                    { *m = ExchangeRequest{} }
func (m *ExchangeRequest) String() string            { return proto1.CompactTextString(m) }
func (*ExchangeRequest) ProtoMessage()               {}
func (*ExchangeRequest) Descriptor() ([]byte, []int) { return fileDescriptorDefine, []int{2} }

func (m *ExchangeRequest) GetMyPeculiarApple() []*Message {
	if m != nil {
		return m.MyPeculiarApple
	}
	return nil
}

func (m *ExchangeRequest) GetYourPeculiarApple() []*Digest {
	if m != nil {
		return m.YourPeculiarApple
	}
	return nil
}

type ExchangeEndRequest struct {
	MyPeculiarApple []*Message `protobuf:"bytes,1,rep,name=MyPeculiarApple" json:"MyPeculiarApple,omitempty"`
}

func (m *ExchangeEndRequest) Reset()                    { *m = ExchangeEndRequest{} }
func (m *ExchangeEndRequest) String() string            { return proto1.CompactTextString(m) }
func (*ExchangeEndRequest) ProtoMessage()               {}
func (*ExchangeEndRequest) Descriptor() ([]byte, []int) { return fileDescriptorDefine, []int{3} }

func (m *ExchangeEndRequest) GetMyPeculiarApple() []*Message {
	if m != nil {
		return m.MyPeculiarApple
	}
	return nil
}

type Digest struct {
	Key     string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Version uint64 `protobuf:"varint,2,opt,name=Version,proto3" json:"Version,omitempty"`
}

func (m *Digest) Reset()                    { *m = Digest{} }
func (m *Digest) String() string            { return proto1.CompactTextString(m) }
func (*Digest) ProtoMessage()               {}
func (*Digest) Descriptor() ([]byte, []int) { return fileDescriptorDefine, []int{4} }

func (m *Digest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Digest) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type Message struct {
	Key        string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Version    uint64 `protobuf:"varint,2,opt,name=Version,proto3" json:"Version,omitempty"`
	Value      string `protobuf:"bytes,3,opt,name=Value,proto3" json:"Value,omitempty"`
	DeleteFlag bool   `protobuf:"varint,4,opt,name=DeleteFlag,proto3" json:"DeleteFlag,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto1.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptorDefine, []int{5} }

func (m *Message) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Message) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Message) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Message) GetDeleteFlag() bool {
	if m != nil {
		return m.DeleteFlag
	}
	return false
}

func init() {
	proto1.RegisterType((*Header)(nil), "proto.Header")
	proto1.RegisterType((*ExchangeBeginRequest)(nil), "proto.ExchangeBeginRequest")
	proto1.RegisterType((*ExchangeRequest)(nil), "proto.ExchangeRequest")
	proto1.RegisterType((*ExchangeEndRequest)(nil), "proto.ExchangeEndRequest")
	proto1.RegisterType((*Digest)(nil), "proto.Digest")
	proto1.RegisterType((*Message)(nil), "proto.Message")
}
func (m *Header) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Header) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Flag != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDefine(dAtA, i, uint64(m.Flag))
	}
	return i, nil
}

func (m *ExchangeBeginRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExchangeBeginRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MyApple) > 0 {
		for _, msg := range m.MyApple {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDefine(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ExchangeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExchangeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MyPeculiarApple) > 0 {
		for _, msg := range m.MyPeculiarApple {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDefine(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.YourPeculiarApple) > 0 {
		for _, msg := range m.YourPeculiarApple {
			dAtA[i] = 0x12
			i++
			i = encodeVarintDefine(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ExchangeEndRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExchangeEndRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MyPeculiarApple) > 0 {
		for _, msg := range m.MyPeculiarApple {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDefine(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Digest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Digest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDefine(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.Version != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDefine(dAtA, i, uint64(m.Version))
	}
	return i, nil
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDefine(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.Version != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDefine(dAtA, i, uint64(m.Version))
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDefine(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.DeleteFlag {
		dAtA[i] = 0x20
		i++
		if m.DeleteFlag {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintDefine(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Header) Size() (n int) {
	var l int
	_ = l
	if m.Flag != 0 {
		n += 1 + sovDefine(uint64(m.Flag))
	}
	return n
}

func (m *ExchangeBeginRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.MyApple) > 0 {
		for _, e := range m.MyApple {
			l = e.Size()
			n += 1 + l + sovDefine(uint64(l))
		}
	}
	return n
}

func (m *ExchangeRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.MyPeculiarApple) > 0 {
		for _, e := range m.MyPeculiarApple {
			l = e.Size()
			n += 1 + l + sovDefine(uint64(l))
		}
	}
	if len(m.YourPeculiarApple) > 0 {
		for _, e := range m.YourPeculiarApple {
			l = e.Size()
			n += 1 + l + sovDefine(uint64(l))
		}
	}
	return n
}

func (m *ExchangeEndRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.MyPeculiarApple) > 0 {
		for _, e := range m.MyPeculiarApple {
			l = e.Size()
			n += 1 + l + sovDefine(uint64(l))
		}
	}
	return n
}

func (m *Digest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovDefine(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovDefine(uint64(m.Version))
	}
	return n
}

func (m *Message) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovDefine(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovDefine(uint64(m.Version))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovDefine(uint64(l))
	}
	if m.DeleteFlag {
		n += 2
	}
	return n
}

func sovDefine(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDefine(x uint64) (n int) {
	return sovDefine(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Header) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDefine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Header: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Header: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flag |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDefine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDefine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExchangeBeginRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDefine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExchangeBeginRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExchangeBeginRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyApple", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDefine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MyApple = append(m.MyApple, &Digest{})
			if err := m.MyApple[len(m.MyApple)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDefine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDefine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExchangeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDefine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExchangeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExchangeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyPeculiarApple", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDefine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MyPeculiarApple = append(m.MyPeculiarApple, &Message{})
			if err := m.MyPeculiarApple[len(m.MyPeculiarApple)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field YourPeculiarApple", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDefine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.YourPeculiarApple = append(m.YourPeculiarApple, &Digest{})
			if err := m.YourPeculiarApple[len(m.YourPeculiarApple)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDefine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDefine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExchangeEndRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDefine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExchangeEndRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExchangeEndRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyPeculiarApple", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDefine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MyPeculiarApple = append(m.MyPeculiarApple, &Message{})
			if err := m.MyPeculiarApple[len(m.MyPeculiarApple)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDefine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDefine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Digest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDefine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Digest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Digest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDefine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDefine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDefine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDefine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDefine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDefine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteFlag", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeleteFlag = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDefine(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDefine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDefine(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDefine
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDefine
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDefine
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDefine
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDefine
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDefine(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDefine = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDefine   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("proto/define.proto", fileDescriptorDefine) }

var fileDescriptorDefine = []byte{
	// 299 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0x49, 0x4d, 0xcb, 0xcc, 0x4b, 0xd5, 0x03, 0x73, 0x84, 0x58, 0xc1, 0x94, 0x92,
	0x0c, 0x17, 0x9b, 0x47, 0x6a, 0x62, 0x4a, 0x6a, 0x91, 0x90, 0x10, 0x17, 0x4b, 0x5a, 0x4e, 0x62,
	0xba, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x6b, 0x10, 0x98, 0xad, 0x64, 0xcf, 0x25, 0xe2, 0x5a, 0x91,
	0x9c, 0x91, 0x98, 0x97, 0x9e, 0xea, 0x94, 0x9a, 0x9e, 0x99, 0x17, 0x94, 0x5a, 0x58, 0x9a, 0x5a,
	0x5c, 0x22, 0xa4, 0xce, 0xc5, 0xee, 0x5b, 0xe9, 0x58, 0x50, 0x90, 0x93, 0x2a, 0xc1, 0xa8, 0xc0,
	0xac, 0xc1, 0x6d, 0xc4, 0x0b, 0x31, 0x55, 0xcf, 0x25, 0x33, 0x3d, 0xb5, 0xb8, 0x24, 0x08, 0x26,
	0xab, 0xd4, 0xc1, 0xc8, 0xc5, 0x0f, 0x33, 0x01, 0xa6, 0xd9, 0x82, 0x8b, 0xdf, 0xb7, 0x32, 0x20,
	0x35, 0xb9, 0x34, 0x27, 0x33, 0xb1, 0x08, 0xd9, 0x10, 0x3e, 0xa8, 0x21, 0xbe, 0xa9, 0xc5, 0xc5,
	0x89, 0xe9, 0xa9, 0x41, 0xe8, 0xca, 0x84, 0xac, 0xb9, 0x04, 0x23, 0xf3, 0x4b, 0x8b, 0x50, 0xf5,
	0x32, 0x61, 0x73, 0x00, 0xa6, 0x3a, 0x25, 0x3f, 0x2e, 0x21, 0x98, 0x4b, 0x5c, 0xf3, 0x52, 0x28,
	0x76, 0x8c, 0x92, 0x09, 0x17, 0x1b, 0xc4, 0x32, 0x21, 0x01, 0x2e, 0x66, 0xef, 0xd4, 0x4a, 0x70,
	0xc0, 0x71, 0x06, 0x81, 0x98, 0x42, 0x12, 0x5c, 0xec, 0x61, 0xa9, 0x45, 0xc5, 0x99, 0xf9, 0x79,
	0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x2c, 0x41, 0x30, 0xae, 0x52, 0x36, 0x17, 0x3b, 0xd4, 0x44, 0x52,
	0xb4, 0x09, 0x89, 0x70, 0xb1, 0x86, 0x25, 0xe6, 0x94, 0xa6, 0x4a, 0x30, 0x83, 0x55, 0x43, 0x38,
	0x42, 0x72, 0x5c, 0x5c, 0x2e, 0xa9, 0x39, 0xa9, 0x25, 0xa9, 0x6e, 0xa0, 0x88, 0x63, 0x51, 0x60,
	0xd4, 0xe0, 0x08, 0x42, 0x12, 0x71, 0x12, 0x38, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6,
	0x07, 0x8f, 0xe4, 0x18, 0x67, 0x3c, 0x96, 0x63, 0x48, 0x62, 0x03, 0x7b, 0xca, 0x18, 0x10, 0x00,
	0x00, 0xff, 0xff, 0xbf, 0x9b, 0x90, 0x18, 0x12, 0x02, 0x00, 0x00,
}
